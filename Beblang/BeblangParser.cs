//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Beblang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BeblangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, MODULE=22, IMPORT=23, VAR=24, 
		BEGIN=25, END=26, EXIT=27, IF=28, THEN=29, ELSIF=30, ELSE=31, WHILE=32, 
		DO=33, MOD=34, TRUE=35, FALSE=36, OR=37, RETURN=38, ARRAY=39, OF=40, INTEGER=41, 
		REAL=42, STRING=43, BOOLEAN=44, PROCEDURE=45, INTEGER_LITERAL=46, IDENTIFIER=47, 
		REAL_LITERAL=48, STRING_LITERAL=49, WS=50, COMMENT=51;
	public const int
		RULE_start = 0, RULE_module = 1, RULE_moduleStatements = 2, RULE_moduleImport = 3, 
		RULE_subprogramDeclaration = 4, RULE_subprogram = 5, RULE_subprogramHeading = 6, 
		RULE_paramList = 7, RULE_variableDeclaration = 8, RULE_variableDeclarationBlock = 9, 
		RULE_subprogramBody = 10, RULE_statement = 11, RULE_assignment = 12, RULE_subprogramCall = 13, 
		RULE_expressionList = 14, RULE_returnStatement = 15, RULE_exitStatement = 16, 
		RULE_ifStatement = 17, RULE_elseIfStatement = 18, RULE_elseStatement = 19, 
		RULE_whileStatement = 20, RULE_expression = 21, RULE_comparisonOp = 22, 
		RULE_simpleExpression = 23, RULE_unaryOp = 24, RULE_binaryOp = 25, RULE_term = 26, 
		RULE_termOp = 27, RULE_factor = 28, RULE_designator = 29, RULE_selector = 30, 
		RULE_qualifiedIdentifier = 31, RULE_literal = 32, RULE_boolean = 33, RULE_type = 34;
	public static readonly string[] ruleNames = {
		"start", "module", "moduleStatements", "moduleImport", "subprogramDeclaration", 
		"subprogram", "subprogramHeading", "paramList", "variableDeclaration", 
		"variableDeclarationBlock", "subprogramBody", "statement", "assignment", 
		"subprogramCall", "expressionList", "returnStatement", "exitStatement", 
		"ifStatement", "elseIfStatement", "elseStatement", "whileStatement", "expression", 
		"comparisonOp", "simpleExpression", "unaryOp", "binaryOp", "term", "termOp", 
		"factor", "designator", "selector", "qualifiedIdentifier", "literal", 
		"boolean", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "':'", "','", "':='", "'='", "'#'", 
		"'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'/'", "'*'", "'&'", "'~'", 
		"'['", "']'", "'MODULE'", "'IMPORT'", "'VAR'", "'BEGIN'", "'END'", "'EXIT'", 
		"'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'WHILE'", "'DO'", "'MOD'", "'TRUE'", 
		"'FALSE'", "'OR'", "'RETURN'", "'ARRAY'", "'OF'", "'INTEGER'", "'REAL'", 
		"'STRING'", "'BOOLEAN'", "'PROCEDURE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "MODULE", 
		"IMPORT", "VAR", "BEGIN", "END", "EXIT", "IF", "THEN", "ELSIF", "ELSE", 
		"WHILE", "DO", "MOD", "TRUE", "FALSE", "OR", "RETURN", "ARRAY", "OF", 
		"INTEGER", "REAL", "STRING", "BOOLEAN", "PROCEDURE", "INTEGER_LITERAL", 
		"IDENTIFIER", "REAL_LITERAL", "STRING_LITERAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Beblang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BeblangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BeblangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BeblangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BeblangParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			module();
			State = 71;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public QualifiedIdentifierContext moduleName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(BeblangParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleStatementsContext moduleStatements() {
			return GetRuleContext<ModuleStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(MODULE);
			State = 74;
			_localctx.moduleName = qualifiedIdentifier();
			State = 75;
			Match(T__0);
			State = 76;
			moduleStatements();
			State = 77;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsContext : ParserRuleContext {
		public SubprogramBodyContext moduleBody;
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramBodyContext subprogramBody() {
			return GetRuleContext<SubprogramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationBlockContext variableDeclarationBlock() {
			return GetRuleContext<VariableDeclarationBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramContext[] subprogram() {
			return GetRuleContexts<SubprogramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramContext subprogram(int i) {
			return GetRuleContext<SubprogramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramDeclarationContext[] subprogramDeclaration() {
			return GetRuleContexts<SubprogramDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramDeclarationContext subprogramDeclaration(int i) {
			return GetRuleContext<SubprogramDeclarationContext>(i);
		}
		public ModuleStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsContext moduleStatements() {
		ModuleStatementsContext _localctx = new ModuleStatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 79;
				moduleImport();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 85;
				variableDeclarationBlock();
				}
			}

			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROCEDURE) {
				{
				State = 90;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 88;
					subprogram();
					}
					break;
				case 2:
					{
					State = 89;
					subprogramDeclaration();
					}
					break;
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			_localctx.moduleBody = subprogramBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(BeblangParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(IMPORT);
			State = 98;
			qualifiedIdentifier();
			State = 99;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramHeadingContext subprogramHeading() {
			return GetRuleContext<SubprogramHeadingContext>(0);
		}
		public SubprogramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramDeclarationContext subprogramDeclaration() {
		SubprogramDeclarationContext _localctx = new SubprogramDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_subprogramDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			subprogramHeading();
			State = 102;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramHeadingContext subprogramHeading() {
			return GetRuleContext<SubprogramHeadingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramBodyContext subprogramBody() {
			return GetRuleContext<SubprogramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationBlockContext variableDeclarationBlock() {
			return GetRuleContext<VariableDeclarationBlockContext>(0);
		}
		public SubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramContext subprogram() {
		SubprogramContext _localctx = new SubprogramContext(Context, State);
		EnterRule(_localctx, 10, RULE_subprogram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			subprogramHeading();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 105;
				variableDeclarationBlock();
				}
			}

			State = 108;
			subprogramBody();
			State = 109;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramHeadingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BeblangParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SubprogramHeadingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramHeading; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramHeading(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramHeadingContext subprogramHeading() {
		SubprogramHeadingContext _localctx = new SubprogramHeadingContext(Context, State);
		EnterRule(_localctx, 12, RULE_subprogramHeading);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(PROCEDURE);
			State = 112;
			Match(IDENTIFIER);
			State = 113;
			Match(T__2);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 114;
				paramList();
				}
			}

			State = 117;
			Match(T__3);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 118;
				Match(T__4);
				State = 119;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 14, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			variableDeclaration();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 123;
				Match(T__5);
				State = 124;
				variableDeclaration();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BeblangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BeblangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(IDENTIFIER);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 131;
				Match(T__5);
				State = 132;
				Match(IDENTIFIER);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			Match(T__4);
			State = 139;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BeblangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationBlockContext variableDeclarationBlock() {
		VariableDeclarationBlockContext _localctx = new VariableDeclarationBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclarationBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(VAR);
			State = 142;
			variableDeclaration();
			State = 147;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 143;
					Match(T__0);
					State = 144;
					variableDeclaration();
					}
					} 
				}
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 150;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BeblangParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SubprogramBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramBodyContext subprogramBody() {
		SubprogramBodyContext _localctx = new SubprogramBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_subprogramBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(BEGIN);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 153;
				statement();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramCallContext subprogramCall() {
			return GetRuleContext<SubprogramCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 161;
				assignment();
				}
				break;
			case 2:
				{
				State = 162;
				returnStatement();
				}
				break;
			case 3:
				{
				State = 163;
				exitStatement();
				}
				break;
			case 4:
				{
				State = 164;
				ifStatement();
				}
				break;
			case 5:
				{
				State = 165;
				whileStatement();
				}
				break;
			case 6:
				{
				State = 166;
				subprogramCall();
				}
				break;
			}
			State = 169;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			designator();
			State = 172;
			Match(T__6);
			State = 173;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public SubprogramCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramCallContext subprogramCall() {
		SubprogramCallContext _localctx = new SubprogramCallContext(Context, State);
		EnterRule(_localctx, 26, RULE_subprogramCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			designator();
			State = 176;
			Match(T__2);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055634242453512L) != 0)) {
				{
				State = 177;
				expressionList();
				}
			}

			State = 180;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			expression();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 183;
				Match(T__5);
				State = 184;
				expression();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BeblangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(RETURN);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055634242453512L) != 0)) {
				{
				State = 191;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(BeblangParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BeblangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BeblangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(IF);
			State = 197;
			expression();
			State = 198;
			Match(THEN);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 199;
				statement();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 205;
				elseIfStatement();
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 211;
				elseStatement();
				}
			}

			State = 214;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(BeblangParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BeblangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(ELSIF);
			State = 217;
			expression();
			State = 218;
			Match(THEN);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 219;
				statement();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BeblangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(ELSE);
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 226;
				statement();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BeblangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BeblangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(WHILE);
			State = 233;
			expression();
			State = 234;
			Match(DO);
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 235;
				statement();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOpContext comparisonOp() {
			return GetRuleContext<ComparisonOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			simpleExpression();
			State = 247;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16128L) != 0)) {
				{
				State = 244;
				comparisonOp();
				State = 245;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOpContext : ParserRuleContext {
		public ComparisonOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOpContext comparisonOp() {
		ComparisonOpContext _localctx = new ComparisonOpContext(Context, State);
		EnterRule(_localctx, 44, RULE_comparisonOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16128L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext[] binaryOp() {
			return GetRuleContexts<BinaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp(int i) {
			return GetRuleContext<BinaryOpContext>(i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13 || _la==T__14) {
				{
				State = 251;
				unaryOp();
				}
			}

			State = 254;
			term();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137439002624L) != 0)) {
				{
				{
				State = 255;
				binaryOp();
				State = 256;
				term();
				}
				}
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BeblangParser.OR, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 50, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 137439002624L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermOpContext[] termOp() {
			return GetRuleContexts<TermOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermOpContext termOp(int i) {
			return GetRuleContext<TermOpContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 52, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			factor();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17180327936L) != 0)) {
				{
				{
				State = 268;
				termOp();
				State = 269;
				factor();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(BeblangParser.MOD, 0); }
		public TermOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermOpContext termOp() {
		TermOpContext _localctx = new TermOpContext(Context, State);
		EnterRule(_localctx, 54, RULE_termOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17180327936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramCallContext subprogramCall() {
			return GetRuleContext<SubprogramCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 56, RULE_factor);
		try {
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				Match(T__18);
				State = 279;
				factor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280;
				Match(T__2);
				State = 281;
				expression();
				State = 282;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 284;
				subprogramCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 285;
				designator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 286;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(IDENTIFIER);
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__19) {
				{
				{
				State = 290;
				selector();
				}
				}
				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 60, RULE_selector);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				Match(T__19);
				State = 297;
				expression();
				State = 298;
				Match(T__20);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				Match(T__1);
				State = 301;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BeblangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BeblangParser.IDENTIFIER, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(IDENTIFIER);
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 305;
				Match(T__1);
				State = 306;
				Match(IDENTIFIER);
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(BeblangParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BeblangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BeblangParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_literal);
		try {
			State = 316;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				Match(REAL_LITERAL);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				Match(INTEGER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 315;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BeblangParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BeblangParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 66, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BeblangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(BeblangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BeblangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BeblangParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BeblangParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BeblangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BeblangParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_type);
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				Match(INTEGER);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				Match(REAL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 323;
				Match(BOOLEAN);
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 324;
				Match(ARRAY);
				State = 325;
				Match(INTEGER_LITERAL);
				State = 326;
				Match(OF);
				State = 327;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,331,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,5,2,81,8,2,10,2,12,2,84,9,2,1,2,3,2,87,8,
		2,1,2,1,2,5,2,91,8,2,10,2,12,2,94,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,
		1,4,1,5,1,5,3,5,107,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,116,8,6,1,6,1,
		6,1,6,3,6,121,8,6,1,7,1,7,1,7,5,7,126,8,7,10,7,12,7,129,9,7,1,8,1,8,1,
		8,5,8,134,8,8,10,8,12,8,137,9,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,146,8,
		9,10,9,12,9,149,9,9,1,9,1,9,1,10,1,10,5,10,155,8,10,10,10,12,10,158,9,
		10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,168,8,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,13,1,13,1,13,3,13,179,8,13,1,13,1,13,1,14,1,14,1,14,5,
		14,186,8,14,10,14,12,14,189,9,14,1,15,1,15,3,15,193,8,15,1,16,1,16,1,17,
		1,17,1,17,1,17,5,17,201,8,17,10,17,12,17,204,9,17,1,17,5,17,207,8,17,10,
		17,12,17,210,9,17,1,17,3,17,213,8,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,
		221,8,18,10,18,12,18,224,9,18,1,19,1,19,5,19,228,8,19,10,19,12,19,231,
		9,19,1,20,1,20,1,20,1,20,5,20,237,8,20,10,20,12,20,240,9,20,1,20,1,20,
		1,21,1,21,1,21,1,21,3,21,248,8,21,1,22,1,22,1,23,3,23,253,8,23,1,23,1,
		23,1,23,1,23,5,23,259,8,23,10,23,12,23,262,9,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,26,1,26,5,26,272,8,26,10,26,12,26,275,9,26,1,27,1,27,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,288,8,28,1,29,1,29,5,29,292,
		8,29,10,29,12,29,295,9,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,303,8,30,
		1,31,1,31,1,31,5,31,308,8,31,10,31,12,31,311,9,31,1,32,1,32,1,32,1,32,
		3,32,317,8,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,329,
		8,34,1,34,0,0,35,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,0,5,1,0,8,13,1,0,14,15,2,
		0,14,15,37,37,2,0,16,18,34,34,1,0,35,36,338,0,70,1,0,0,0,2,73,1,0,0,0,
		4,82,1,0,0,0,6,97,1,0,0,0,8,101,1,0,0,0,10,104,1,0,0,0,12,111,1,0,0,0,
		14,122,1,0,0,0,16,130,1,0,0,0,18,141,1,0,0,0,20,152,1,0,0,0,22,167,1,0,
		0,0,24,171,1,0,0,0,26,175,1,0,0,0,28,182,1,0,0,0,30,190,1,0,0,0,32,194,
		1,0,0,0,34,196,1,0,0,0,36,216,1,0,0,0,38,225,1,0,0,0,40,232,1,0,0,0,42,
		243,1,0,0,0,44,249,1,0,0,0,46,252,1,0,0,0,48,263,1,0,0,0,50,265,1,0,0,
		0,52,267,1,0,0,0,54,276,1,0,0,0,56,287,1,0,0,0,58,289,1,0,0,0,60,302,1,
		0,0,0,62,304,1,0,0,0,64,316,1,0,0,0,66,318,1,0,0,0,68,328,1,0,0,0,70,71,
		3,2,1,0,71,72,5,0,0,1,72,1,1,0,0,0,73,74,5,22,0,0,74,75,3,62,31,0,75,76,
		5,1,0,0,76,77,3,4,2,0,77,78,5,2,0,0,78,3,1,0,0,0,79,81,3,6,3,0,80,79,1,
		0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,86,1,0,0,0,84,82,1,
		0,0,0,85,87,3,18,9,0,86,85,1,0,0,0,86,87,1,0,0,0,87,92,1,0,0,0,88,91,3,
		10,5,0,89,91,3,8,4,0,90,88,1,0,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,
		0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,3,20,10,0,96,5,1,
		0,0,0,97,98,5,23,0,0,98,99,3,62,31,0,99,100,5,1,0,0,100,7,1,0,0,0,101,
		102,3,12,6,0,102,103,5,1,0,0,103,9,1,0,0,0,104,106,3,12,6,0,105,107,3,
		18,9,0,106,105,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,109,3,20,10,
		0,109,110,5,1,0,0,110,11,1,0,0,0,111,112,5,45,0,0,112,113,5,47,0,0,113,
		115,5,3,0,0,114,116,3,14,7,0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,1,
		0,0,0,117,120,5,4,0,0,118,119,5,5,0,0,119,121,3,68,34,0,120,118,1,0,0,
		0,120,121,1,0,0,0,121,13,1,0,0,0,122,127,3,16,8,0,123,124,5,6,0,0,124,
		126,3,16,8,0,125,123,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,
		0,0,0,128,15,1,0,0,0,129,127,1,0,0,0,130,135,5,47,0,0,131,132,5,6,0,0,
		132,134,5,47,0,0,133,131,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,
		1,0,0,0,136,138,1,0,0,0,137,135,1,0,0,0,138,139,5,5,0,0,139,140,3,68,34,
		0,140,17,1,0,0,0,141,142,5,24,0,0,142,147,3,16,8,0,143,144,5,1,0,0,144,
		146,3,16,8,0,145,143,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,
		0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,5,1,0,0,151,19,1,0,0,0,152,
		156,5,25,0,0,153,155,3,22,11,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,
		1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,26,0,
		0,160,21,1,0,0,0,161,168,3,24,12,0,162,168,3,30,15,0,163,168,3,32,16,0,
		164,168,3,34,17,0,165,168,3,40,20,0,166,168,3,26,13,0,167,161,1,0,0,0,
		167,162,1,0,0,0,167,163,1,0,0,0,167,164,1,0,0,0,167,165,1,0,0,0,167,166,
		1,0,0,0,168,169,1,0,0,0,169,170,5,1,0,0,170,23,1,0,0,0,171,172,3,58,29,
		0,172,173,5,7,0,0,173,174,3,42,21,0,174,25,1,0,0,0,175,176,3,58,29,0,176,
		178,5,3,0,0,177,179,3,28,14,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,
		1,0,0,0,180,181,5,4,0,0,181,27,1,0,0,0,182,187,3,42,21,0,183,184,5,6,0,
		0,184,186,3,42,21,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,
		188,1,0,0,0,188,29,1,0,0,0,189,187,1,0,0,0,190,192,5,38,0,0,191,193,3,
		42,21,0,192,191,1,0,0,0,192,193,1,0,0,0,193,31,1,0,0,0,194,195,5,27,0,
		0,195,33,1,0,0,0,196,197,5,28,0,0,197,198,3,42,21,0,198,202,5,29,0,0,199,
		201,3,22,11,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,
		1,0,0,0,203,208,1,0,0,0,204,202,1,0,0,0,205,207,3,36,18,0,206,205,1,0,
		0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,212,1,0,0,0,210,
		208,1,0,0,0,211,213,3,38,19,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,
		1,0,0,0,214,215,5,26,0,0,215,35,1,0,0,0,216,217,5,30,0,0,217,218,3,42,
		21,0,218,222,5,29,0,0,219,221,3,22,11,0,220,219,1,0,0,0,221,224,1,0,0,
		0,222,220,1,0,0,0,222,223,1,0,0,0,223,37,1,0,0,0,224,222,1,0,0,0,225,229,
		5,31,0,0,226,228,3,22,11,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,
		0,0,229,230,1,0,0,0,230,39,1,0,0,0,231,229,1,0,0,0,232,233,5,32,0,0,233,
		234,3,42,21,0,234,238,5,33,0,0,235,237,3,22,11,0,236,235,1,0,0,0,237,240,
		1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,
		0,241,242,5,26,0,0,242,41,1,0,0,0,243,247,3,46,23,0,244,245,3,44,22,0,
		245,246,3,46,23,0,246,248,1,0,0,0,247,244,1,0,0,0,247,248,1,0,0,0,248,
		43,1,0,0,0,249,250,7,0,0,0,250,45,1,0,0,0,251,253,3,48,24,0,252,251,1,
		0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,260,3,52,26,0,255,256,3,50,25,
		0,256,257,3,52,26,0,257,259,1,0,0,0,258,255,1,0,0,0,259,262,1,0,0,0,260,
		258,1,0,0,0,260,261,1,0,0,0,261,47,1,0,0,0,262,260,1,0,0,0,263,264,7,1,
		0,0,264,49,1,0,0,0,265,266,7,2,0,0,266,51,1,0,0,0,267,273,3,56,28,0,268,
		269,3,54,27,0,269,270,3,56,28,0,270,272,1,0,0,0,271,268,1,0,0,0,272,275,
		1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,53,1,0,0,0,275,273,1,0,0,0,
		276,277,7,3,0,0,277,55,1,0,0,0,278,279,5,19,0,0,279,288,3,56,28,0,280,
		281,5,3,0,0,281,282,3,42,21,0,282,283,5,4,0,0,283,288,1,0,0,0,284,288,
		3,26,13,0,285,288,3,58,29,0,286,288,3,64,32,0,287,278,1,0,0,0,287,280,
		1,0,0,0,287,284,1,0,0,0,287,285,1,0,0,0,287,286,1,0,0,0,288,57,1,0,0,0,
		289,293,5,47,0,0,290,292,3,60,30,0,291,290,1,0,0,0,292,295,1,0,0,0,293,
		291,1,0,0,0,293,294,1,0,0,0,294,59,1,0,0,0,295,293,1,0,0,0,296,297,5,20,
		0,0,297,298,3,42,21,0,298,299,5,21,0,0,299,303,1,0,0,0,300,301,5,2,0,0,
		301,303,5,47,0,0,302,296,1,0,0,0,302,300,1,0,0,0,303,61,1,0,0,0,304,309,
		5,47,0,0,305,306,5,2,0,0,306,308,5,47,0,0,307,305,1,0,0,0,308,311,1,0,
		0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,63,1,0,0,0,311,309,1,0,0,0,312,
		317,5,48,0,0,313,317,5,46,0,0,314,317,5,49,0,0,315,317,3,66,33,0,316,312,
		1,0,0,0,316,313,1,0,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,65,1,0,0,0,
		318,319,7,4,0,0,319,67,1,0,0,0,320,329,5,41,0,0,321,329,5,42,0,0,322,329,
		5,43,0,0,323,329,5,44,0,0,324,325,5,39,0,0,325,326,5,46,0,0,326,327,5,
		40,0,0,327,329,3,68,34,0,328,320,1,0,0,0,328,321,1,0,0,0,328,322,1,0,0,
		0,328,323,1,0,0,0,328,324,1,0,0,0,329,69,1,0,0,0,31,82,86,90,92,106,115,
		120,127,135,147,156,167,178,187,192,202,208,212,222,229,238,247,252,260,
		273,287,293,302,309,316,328
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
