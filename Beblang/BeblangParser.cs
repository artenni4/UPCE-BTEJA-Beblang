//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Beblang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BeblangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, MODULE=22, IMPORT=23, VAR=24, 
		BEGIN=25, END=26, EXIT=27, IF=28, THEN=29, ELSIF=30, ELSE=31, WHILE=32, 
		DO=33, MOD=34, TRUE=35, FALSE=36, OR=37, RETURN=38, ARRAY=39, OF=40, INTEGER=41, 
		REAL=42, STRING=43, BOOLEAN=44, PROCEDURE=45, INTEGER_LITERAL=46, IDENTIFIER=47, 
		REAL_LITERAL=48, STRING_LITERAL=49, WS=50, COMMENT=51;
	public const int
		RULE_start = 0, RULE_module = 1, RULE_moduleStatements = 2, RULE_moduleImport = 3, 
		RULE_subprogram = 4, RULE_subprogramDeclaration = 5, RULE_paramList = 6, 
		RULE_variableDeclaration = 7, RULE_variableDeclarationBlock = 8, RULE_subprogramBody = 9, 
		RULE_statement = 10, RULE_assignment = 11, RULE_subprogramCall = 12, RULE_expressionList = 13, 
		RULE_returnStatement = 14, RULE_exitStatement = 15, RULE_ifStatement = 16, 
		RULE_elseIfStatement = 17, RULE_elseStatement = 18, RULE_whileStatement = 19, 
		RULE_expression = 20, RULE_comparisonOp = 21, RULE_simpleExpression = 22, 
		RULE_unaryOp = 23, RULE_binaryOp = 24, RULE_term = 25, RULE_termOp = 26, 
		RULE_factor = 27, RULE_designator = 28, RULE_selector = 29, RULE_qualifiedIdentifier = 30, 
		RULE_literal = 31, RULE_boolean = 32, RULE_type = 33;
	public static readonly string[] ruleNames = {
		"start", "module", "moduleStatements", "moduleImport", "subprogram", "subprogramDeclaration", 
		"paramList", "variableDeclaration", "variableDeclarationBlock", "subprogramBody", 
		"statement", "assignment", "subprogramCall", "expressionList", "returnStatement", 
		"exitStatement", "ifStatement", "elseIfStatement", "elseStatement", "whileStatement", 
		"expression", "comparisonOp", "simpleExpression", "unaryOp", "binaryOp", 
		"term", "termOp", "factor", "designator", "selector", "qualifiedIdentifier", 
		"literal", "boolean", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "':'", "','", "':='", "'='", "'#'", 
		"'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'/'", "'*'", "'&'", "'~'", 
		"'['", "']'", "'MODULE'", "'IMPORT'", "'VAR'", "'BEGIN'", "'END'", "'EXIT'", 
		"'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'WHILE'", "'DO'", "'MOD'", "'TRUE'", 
		"'FALSE'", "'OR'", "'RETURN'", "'ARRAY'", "'OF'", "'INTEGER'", "'REAL'", 
		"'STRING'", "'BOOLEAN'", "'PROCEDURE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "MODULE", 
		"IMPORT", "VAR", "BEGIN", "END", "EXIT", "IF", "THEN", "ELSIF", "ELSE", 
		"WHILE", "DO", "MOD", "TRUE", "FALSE", "OR", "RETURN", "ARRAY", "OF", 
		"INTEGER", "REAL", "STRING", "BOOLEAN", "PROCEDURE", "INTEGER_LITERAL", 
		"IDENTIFIER", "REAL_LITERAL", "STRING_LITERAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Beblang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BeblangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BeblangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BeblangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BeblangParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			module();
			State = 69;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public QualifiedIdentifierContext moduleName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(BeblangParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleStatementsContext moduleStatements() {
			return GetRuleContext<ModuleStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(MODULE);
			State = 72;
			_localctx.moduleName = qualifiedIdentifier();
			State = 73;
			Match(T__0);
			State = 74;
			moduleStatements();
			State = 75;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsContext : ParserRuleContext {
		public SubprogramBodyContext moduleBody;
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramBodyContext subprogramBody() {
			return GetRuleContext<SubprogramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationBlockContext variableDeclarationBlock() {
			return GetRuleContext<VariableDeclarationBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramContext[] subprogram() {
			return GetRuleContexts<SubprogramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramContext subprogram(int i) {
			return GetRuleContext<SubprogramContext>(i);
		}
		public ModuleStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsContext moduleStatements() {
		ModuleStatementsContext _localctx = new ModuleStatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 77;
				moduleImport();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 83;
				variableDeclarationBlock();
				}
			}

			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROCEDURE) {
				{
				{
				State = 86;
				subprogram();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			_localctx.moduleBody = subprogramBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(BeblangParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(IMPORT);
			State = 95;
			qualifiedIdentifier();
			State = 96;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramDeclarationContext subprogramDeclaration() {
			return GetRuleContext<SubprogramDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramBodyContext subprogramBody() {
			return GetRuleContext<SubprogramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationBlockContext variableDeclarationBlock() {
			return GetRuleContext<VariableDeclarationBlockContext>(0);
		}
		public SubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramContext subprogram() {
		SubprogramContext _localctx = new SubprogramContext(Context, State);
		EnterRule(_localctx, 8, RULE_subprogram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			subprogramDeclaration();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 99;
				variableDeclarationBlock();
				}
			}

			State = 102;
			subprogramBody();
			State = 103;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BeblangParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SubprogramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramDeclarationContext subprogramDeclaration() {
		SubprogramDeclarationContext _localctx = new SubprogramDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_subprogramDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(PROCEDURE);
			State = 106;
			Match(IDENTIFIER);
			State = 107;
			Match(T__2);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 108;
				paramList();
				}
			}

			State = 111;
			Match(T__3);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 112;
				Match(T__4);
				State = 113;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			variableDeclaration();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 117;
				Match(T__5);
				State = 118;
				variableDeclaration();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BeblangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BeblangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(IDENTIFIER);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 125;
				Match(T__5);
				State = 126;
				Match(IDENTIFIER);
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(T__4);
			State = 133;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BeblangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationBlockContext variableDeclarationBlock() {
		VariableDeclarationBlockContext _localctx = new VariableDeclarationBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclarationBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(VAR);
			State = 136;
			variableDeclaration();
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 137;
					Match(T__0);
					State = 138;
					variableDeclaration();
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 144;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BeblangParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SubprogramBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramBodyContext subprogramBody() {
		SubprogramBodyContext _localctx = new SubprogramBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_subprogramBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			Match(BEGIN);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 147;
				statement();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramCallContext subprogramCall() {
			return GetRuleContext<SubprogramCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 155;
				assignment();
				}
				break;
			case 2:
				{
				State = 156;
				returnStatement();
				}
				break;
			case 3:
				{
				State = 157;
				exitStatement();
				}
				break;
			case 4:
				{
				State = 158;
				ifStatement();
				}
				break;
			case 5:
				{
				State = 159;
				whileStatement();
				}
				break;
			case 6:
				{
				State = 160;
				subprogramCall();
				}
				break;
			}
			State = 163;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			designator();
			State = 166;
			Match(T__6);
			State = 167;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public SubprogramCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramCallContext subprogramCall() {
		SubprogramCallContext _localctx = new SubprogramCallContext(Context, State);
		EnterRule(_localctx, 24, RULE_subprogramCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			designator();
			State = 170;
			Match(T__2);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055634242453512L) != 0)) {
				{
				State = 171;
				expressionList();
				}
			}

			State = 174;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 26, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			expression();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 177;
				Match(T__5);
				State = 178;
				expression();
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BeblangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(RETURN);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055634242453512L) != 0)) {
				{
				State = 185;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(BeblangParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BeblangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BeblangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(IF);
			State = 191;
			expression();
			State = 192;
			Match(THEN);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 193;
				statement();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 199;
				elseIfStatement();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 205;
				elseStatement();
				}
			}

			State = 208;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(BeblangParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BeblangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(ELSIF);
			State = 211;
			expression();
			State = 212;
			Match(THEN);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 213;
				statement();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BeblangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(ELSE);
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 220;
				statement();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BeblangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BeblangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(WHILE);
			State = 227;
			expression();
			State = 228;
			Match(DO);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 229;
				statement();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 235;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOpContext comparisonOp() {
			return GetRuleContext<ComparisonOpContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			simpleExpression();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16128L) != 0)) {
				{
				State = 238;
				comparisonOp();
				State = 239;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOpContext : ParserRuleContext {
		public ComparisonOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOpContext comparisonOp() {
		ComparisonOpContext _localctx = new ComparisonOpContext(Context, State);
		EnterRule(_localctx, 42, RULE_comparisonOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16128L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext[] binaryOp() {
			return GetRuleContexts<BinaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp(int i) {
			return GetRuleContext<BinaryOpContext>(i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13 || _la==T__14) {
				{
				State = 245;
				unaryOp();
				}
			}

			State = 248;
			term();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137439002624L) != 0)) {
				{
				{
				State = 249;
				binaryOp();
				State = 250;
				term();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 46, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(BeblangParser.OR, 0); }
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 48, RULE_binaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 137439002624L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermOpContext[] termOp() {
			return GetRuleContexts<TermOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermOpContext termOp(int i) {
			return GetRuleContext<TermOpContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 50, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			factor();
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17180327936L) != 0)) {
				{
				{
				State = 262;
				termOp();
				State = 263;
				factor();
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(BeblangParser.MOD, 0); }
		public TermOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermOpContext termOp() {
		TermOpContext _localctx = new TermOpContext(Context, State);
		EnterRule(_localctx, 52, RULE_termOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17180327936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramCallContext subprogramCall() {
			return GetRuleContext<SubprogramCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 54, RULE_factor);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				Match(T__18);
				State = 273;
				factor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				Match(T__2);
				State = 275;
				expression();
				State = 276;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				subprogramCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				designator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 56, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(IDENTIFIER);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__19) {
				{
				{
				State = 284;
				selector();
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 58, RULE_selector);
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				Match(T__19);
				State = 291;
				expression();
				State = 292;
				Match(T__20);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294;
				Match(T__1);
				State = 295;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BeblangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BeblangParser.IDENTIFIER, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(IDENTIFIER);
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 299;
				Match(T__1);
				State = 300;
				Match(IDENTIFIER);
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(BeblangParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BeblangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BeblangParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_literal);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				Match(REAL_LITERAL);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 307;
				Match(INTEGER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 309;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BeblangParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BeblangParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 64, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BeblangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(BeblangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BeblangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BeblangParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BeblangParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BeblangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BeblangParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_type);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314;
				Match(INTEGER);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315;
				Match(REAL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 317;
				Match(BOOLEAN);
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 318;
				Match(ARRAY);
				State = 319;
				Match(INTEGER_LITERAL);
				State = 320;
				Match(OF);
				State = 321;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,325,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,5,2,79,8,2,10,2,12,2,82,9,2,1,2,3,2,85,8,2,1,2,5,2,
		88,8,2,10,2,12,2,91,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,3,4,101,8,4,1,
		4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,110,8,5,1,5,1,5,1,5,3,5,115,8,5,1,6,1,6,
		1,6,5,6,120,8,6,10,6,12,6,123,9,6,1,7,1,7,1,7,5,7,128,8,7,10,7,12,7,131,
		9,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,5,8,140,8,8,10,8,12,8,143,9,8,1,8,1,8,
		1,9,1,9,5,9,149,8,9,10,9,12,9,152,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
		1,10,3,10,162,8,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,173,
		8,12,1,12,1,12,1,13,1,13,1,13,5,13,180,8,13,10,13,12,13,183,9,13,1,14,
		1,14,3,14,187,8,14,1,15,1,15,1,16,1,16,1,16,1,16,5,16,195,8,16,10,16,12,
		16,198,9,16,1,16,5,16,201,8,16,10,16,12,16,204,9,16,1,16,3,16,207,8,16,
		1,16,1,16,1,17,1,17,1,17,1,17,5,17,215,8,17,10,17,12,17,218,9,17,1,18,
		1,18,5,18,222,8,18,10,18,12,18,225,9,18,1,19,1,19,1,19,1,19,5,19,231,8,
		19,10,19,12,19,234,9,19,1,19,1,19,1,20,1,20,1,20,1,20,3,20,242,8,20,1,
		21,1,21,1,22,3,22,247,8,22,1,22,1,22,1,22,1,22,5,22,253,8,22,10,22,12,
		22,256,9,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,5,25,266,8,25,10,25,
		12,25,269,9,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
		3,27,282,8,27,1,28,1,28,5,28,286,8,28,10,28,12,28,289,9,28,1,29,1,29,1,
		29,1,29,1,29,1,29,3,29,297,8,29,1,30,1,30,1,30,5,30,302,8,30,10,30,12,
		30,305,9,30,1,31,1,31,1,31,1,31,3,31,311,8,31,1,32,1,32,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,3,33,323,8,33,1,33,0,0,34,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,0,5,1,0,8,13,1,0,14,15,2,0,14,15,37,37,2,0,16,18,34,34,1,0,35,36,
		332,0,68,1,0,0,0,2,71,1,0,0,0,4,80,1,0,0,0,6,94,1,0,0,0,8,98,1,0,0,0,10,
		105,1,0,0,0,12,116,1,0,0,0,14,124,1,0,0,0,16,135,1,0,0,0,18,146,1,0,0,
		0,20,161,1,0,0,0,22,165,1,0,0,0,24,169,1,0,0,0,26,176,1,0,0,0,28,184,1,
		0,0,0,30,188,1,0,0,0,32,190,1,0,0,0,34,210,1,0,0,0,36,219,1,0,0,0,38,226,
		1,0,0,0,40,237,1,0,0,0,42,243,1,0,0,0,44,246,1,0,0,0,46,257,1,0,0,0,48,
		259,1,0,0,0,50,261,1,0,0,0,52,270,1,0,0,0,54,281,1,0,0,0,56,283,1,0,0,
		0,58,296,1,0,0,0,60,298,1,0,0,0,62,310,1,0,0,0,64,312,1,0,0,0,66,322,1,
		0,0,0,68,69,3,2,1,0,69,70,5,0,0,1,70,1,1,0,0,0,71,72,5,22,0,0,72,73,3,
		60,30,0,73,74,5,1,0,0,74,75,3,4,2,0,75,76,5,2,0,0,76,3,1,0,0,0,77,79,3,
		6,3,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,84,1,
		0,0,0,82,80,1,0,0,0,83,85,3,16,8,0,84,83,1,0,0,0,84,85,1,0,0,0,85,89,1,
		0,0,0,86,88,3,8,4,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,89,90,1,
		0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,3,18,9,0,93,5,1,0,0,0,94,95,5,
		23,0,0,95,96,3,60,30,0,96,97,5,1,0,0,97,7,1,0,0,0,98,100,3,10,5,0,99,101,
		3,16,8,0,100,99,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,102,103,3,18,9,
		0,103,104,5,1,0,0,104,9,1,0,0,0,105,106,5,45,0,0,106,107,5,47,0,0,107,
		109,5,3,0,0,108,110,3,12,6,0,109,108,1,0,0,0,109,110,1,0,0,0,110,111,1,
		0,0,0,111,114,5,4,0,0,112,113,5,5,0,0,113,115,3,66,33,0,114,112,1,0,0,
		0,114,115,1,0,0,0,115,11,1,0,0,0,116,121,3,14,7,0,117,118,5,6,0,0,118,
		120,3,14,7,0,119,117,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,
		0,0,0,122,13,1,0,0,0,123,121,1,0,0,0,124,129,5,47,0,0,125,126,5,6,0,0,
		126,128,5,47,0,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,
		1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,5,5,0,0,133,134,3,66,33,
		0,134,15,1,0,0,0,135,136,5,24,0,0,136,141,3,14,7,0,137,138,5,1,0,0,138,
		140,3,14,7,0,139,137,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,
		0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,5,1,0,0,145,17,1,0,0,0,146,
		150,5,25,0,0,147,149,3,20,10,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,
		1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,5,26,0,
		0,154,19,1,0,0,0,155,162,3,22,11,0,156,162,3,28,14,0,157,162,3,30,15,0,
		158,162,3,32,16,0,159,162,3,38,19,0,160,162,3,24,12,0,161,155,1,0,0,0,
		161,156,1,0,0,0,161,157,1,0,0,0,161,158,1,0,0,0,161,159,1,0,0,0,161,160,
		1,0,0,0,162,163,1,0,0,0,163,164,5,1,0,0,164,21,1,0,0,0,165,166,3,56,28,
		0,166,167,5,7,0,0,167,168,3,40,20,0,168,23,1,0,0,0,169,170,3,56,28,0,170,
		172,5,3,0,0,171,173,3,26,13,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,
		1,0,0,0,174,175,5,4,0,0,175,25,1,0,0,0,176,181,3,40,20,0,177,178,5,6,0,
		0,178,180,3,40,20,0,179,177,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,
		182,1,0,0,0,182,27,1,0,0,0,183,181,1,0,0,0,184,186,5,38,0,0,185,187,3,
		40,20,0,186,185,1,0,0,0,186,187,1,0,0,0,187,29,1,0,0,0,188,189,5,27,0,
		0,189,31,1,0,0,0,190,191,5,28,0,0,191,192,3,40,20,0,192,196,5,29,0,0,193,
		195,3,20,10,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,
		1,0,0,0,197,202,1,0,0,0,198,196,1,0,0,0,199,201,3,34,17,0,200,199,1,0,
		0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,206,1,0,0,0,204,
		202,1,0,0,0,205,207,3,36,18,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,
		1,0,0,0,208,209,5,26,0,0,209,33,1,0,0,0,210,211,5,30,0,0,211,212,3,40,
		20,0,212,216,5,29,0,0,213,215,3,20,10,0,214,213,1,0,0,0,215,218,1,0,0,
		0,216,214,1,0,0,0,216,217,1,0,0,0,217,35,1,0,0,0,218,216,1,0,0,0,219,223,
		5,31,0,0,220,222,3,20,10,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,
		0,0,223,224,1,0,0,0,224,37,1,0,0,0,225,223,1,0,0,0,226,227,5,32,0,0,227,
		228,3,40,20,0,228,232,5,33,0,0,229,231,3,20,10,0,230,229,1,0,0,0,231,234,
		1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,
		0,235,236,5,26,0,0,236,39,1,0,0,0,237,241,3,44,22,0,238,239,3,42,21,0,
		239,240,3,44,22,0,240,242,1,0,0,0,241,238,1,0,0,0,241,242,1,0,0,0,242,
		41,1,0,0,0,243,244,7,0,0,0,244,43,1,0,0,0,245,247,3,46,23,0,246,245,1,
		0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,254,3,50,25,0,249,250,3,48,24,
		0,250,251,3,50,25,0,251,253,1,0,0,0,252,249,1,0,0,0,253,256,1,0,0,0,254,
		252,1,0,0,0,254,255,1,0,0,0,255,45,1,0,0,0,256,254,1,0,0,0,257,258,7,1,
		0,0,258,47,1,0,0,0,259,260,7,2,0,0,260,49,1,0,0,0,261,267,3,54,27,0,262,
		263,3,52,26,0,263,264,3,54,27,0,264,266,1,0,0,0,265,262,1,0,0,0,266,269,
		1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,51,1,0,0,0,269,267,1,0,0,0,
		270,271,7,3,0,0,271,53,1,0,0,0,272,273,5,19,0,0,273,282,3,54,27,0,274,
		275,5,3,0,0,275,276,3,40,20,0,276,277,5,4,0,0,277,282,1,0,0,0,278,282,
		3,24,12,0,279,282,3,56,28,0,280,282,3,62,31,0,281,272,1,0,0,0,281,274,
		1,0,0,0,281,278,1,0,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,55,1,0,0,0,
		283,287,5,47,0,0,284,286,3,58,29,0,285,284,1,0,0,0,286,289,1,0,0,0,287,
		285,1,0,0,0,287,288,1,0,0,0,288,57,1,0,0,0,289,287,1,0,0,0,290,291,5,20,
		0,0,291,292,3,40,20,0,292,293,5,21,0,0,293,297,1,0,0,0,294,295,5,2,0,0,
		295,297,5,47,0,0,296,290,1,0,0,0,296,294,1,0,0,0,297,59,1,0,0,0,298,303,
		5,47,0,0,299,300,5,2,0,0,300,302,5,47,0,0,301,299,1,0,0,0,302,305,1,0,
		0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,61,1,0,0,0,305,303,1,0,0,0,306,
		311,5,48,0,0,307,311,5,46,0,0,308,311,5,49,0,0,309,311,3,64,32,0,310,306,
		1,0,0,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,311,63,1,0,0,0,
		312,313,7,4,0,0,313,65,1,0,0,0,314,323,5,41,0,0,315,323,5,42,0,0,316,323,
		5,43,0,0,317,323,5,44,0,0,318,319,5,39,0,0,319,320,5,46,0,0,320,321,5,
		40,0,0,321,323,3,66,33,0,322,314,1,0,0,0,322,315,1,0,0,0,322,316,1,0,0,
		0,322,317,1,0,0,0,322,318,1,0,0,0,323,67,1,0,0,0,30,80,84,89,100,109,114,
		121,129,141,150,161,172,181,186,196,202,206,216,223,232,241,246,254,267,
		281,287,296,303,310,322
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
