//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Beblang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BeblangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, MODULE=22, IMPORT=23, VAR=24, 
		BEGIN=25, END=26, EXIT=27, IF=28, THEN=29, ELSIF=30, ELSE=31, WHILE=32, 
		DO=33, MOD=34, TRUE=35, FALSE=36, OR=37, RETURN=38, ARRAY=39, OF=40, INTEGER=41, 
		REAL=42, STRING=43, BOOLEAN=44, PROCEDURE=45, INTEGER_LITERAL=46, IDENTIFIER=47, 
		REAL_LITERAL=48, STRING_LITERAL=49, WS=50, COMMENT=51;
	public const int
		RULE_start = 0, RULE_module = 1, RULE_moduleStatements = 2, RULE_moduleImport = 3, 
		RULE_subprogram = 4, RULE_subprogramDeclaration = 5, RULE_variableDeclaration = 6, 
		RULE_variableDeclarationBlock = 7, RULE_subprogramBody = 8, RULE_statement = 9, 
		RULE_assignment = 10, RULE_subprogramCall = 11, RULE_returnStatement = 12, 
		RULE_exitStatement = 13, RULE_ifStatement = 14, RULE_elseIfStatement = 15, 
		RULE_elseStatement = 16, RULE_whileStatement = 17, RULE_expression = 18, 
		RULE_simpleExpression = 19, RULE_term = 20, RULE_factor = 21, RULE_designator = 22, 
		RULE_selector = 23, RULE_qualifiedIdentifier = 24, RULE_literal = 25, 
		RULE_boolean = 26, RULE_type = 27;
	public static readonly string[] ruleNames = {
		"start", "module", "moduleStatements", "moduleImport", "subprogram", "subprogramDeclaration", 
		"variableDeclaration", "variableDeclarationBlock", "subprogramBody", "statement", 
		"assignment", "subprogramCall", "returnStatement", "exitStatement", "ifStatement", 
		"elseIfStatement", "elseStatement", "whileStatement", "expression", "simpleExpression", 
		"term", "factor", "designator", "selector", "qualifiedIdentifier", "literal", 
		"boolean", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "':'", "','", "':='", "'='", "'#'", 
		"'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'/'", "'*'", "'&'", "'~'", 
		"'['", "']'", "'MODULE'", "'IMPORT'", "'VAR'", "'BEGIN'", "'END'", "'EXIT'", 
		"'IF'", "'THEN'", "'ELSIF'", "'ELSE'", "'WHILE'", "'DO'", "'MOD'", "'TRUE'", 
		"'FALSE'", "'OR'", "'RETURN'", "'ARRAY'", "'OF'", "'INTEGER'", "'REAL'", 
		"'STRING'", "'BOOLEAN'", "'PROCEDURE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "MODULE", 
		"IMPORT", "VAR", "BEGIN", "END", "EXIT", "IF", "THEN", "ELSIF", "ELSE", 
		"WHILE", "DO", "MOD", "TRUE", "FALSE", "OR", "RETURN", "ARRAY", "OF", 
		"INTEGER", "REAL", "STRING", "BOOLEAN", "PROCEDURE", "INTEGER_LITERAL", 
		"IDENTIFIER", "REAL_LITERAL", "STRING_LITERAL", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Beblang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BeblangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BeblangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BeblangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BeblangParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			module();
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public QualifiedIdentifierContext moduleName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(BeblangParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleStatementsContext moduleStatements() {
			return GetRuleContext<ModuleStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(MODULE);
			State = 60;
			_localctx.moduleName = qualifiedIdentifier();
			State = 61;
			Match(T__0);
			State = 62;
			moduleStatements();
			State = 63;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleStatementsContext : ParserRuleContext {
		public SubprogramBodyContext moduleBody;
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramBodyContext subprogramBody() {
			return GetRuleContext<SubprogramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleImportContext[] moduleImport() {
			return GetRuleContexts<ModuleImportContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleImportContext moduleImport(int i) {
			return GetRuleContext<ModuleImportContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationBlockContext variableDeclarationBlock() {
			return GetRuleContext<VariableDeclarationBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramContext[] subprogram() {
			return GetRuleContexts<SubprogramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramContext subprogram(int i) {
			return GetRuleContext<SubprogramContext>(i);
		}
		public ModuleStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleStatementsContext moduleStatements() {
		ModuleStatementsContext _localctx = new ModuleStatementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 65;
				moduleImport();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 71;
				variableDeclarationBlock();
				}
			}

			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROCEDURE) {
				{
				{
				State = 74;
				subprogram();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			_localctx.moduleBody = subprogramBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleImportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(BeblangParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ModuleImportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleImport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleImportContext moduleImport() {
		ModuleImportContext _localctx = new ModuleImportContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleImport);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IMPORT);
			State = 83;
			qualifiedIdentifier();
			State = 84;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramDeclarationContext subprogramDeclaration() {
			return GetRuleContext<SubprogramDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramBodyContext subprogramBody() {
			return GetRuleContext<SubprogramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationBlockContext variableDeclarationBlock() {
			return GetRuleContext<VariableDeclarationBlockContext>(0);
		}
		public SubprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramContext subprogram() {
		SubprogramContext _localctx = new SubprogramContext(Context, State);
		EnterRule(_localctx, 8, RULE_subprogram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			subprogramDeclaration();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 87;
				variableDeclarationBlock();
				}
			}

			State = 90;
			subprogramBody();
			State = 91;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(BeblangParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public SubprogramDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramDeclarationContext subprogramDeclaration() {
		SubprogramDeclarationContext _localctx = new SubprogramDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_subprogramDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(PROCEDURE);
			State = 94;
			Match(IDENTIFIER);
			State = 95;
			Match(T__2);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 96;
				variableDeclaration();
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 97;
					Match(T__0);
					State = 98;
					variableDeclaration();
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 106;
			Match(T__3);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 107;
				Match(T__4);
				State = 108;
				type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BeblangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BeblangParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(IDENTIFIER);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 112;
				Match(T__5);
				State = 113;
				Match(IDENTIFIER);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			Match(T__4);
			State = 120;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(BeblangParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationBlockContext variableDeclarationBlock() {
		VariableDeclarationBlockContext _localctx = new VariableDeclarationBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_variableDeclarationBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(VAR);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 123;
				variableDeclaration();
				State = 124;
				Match(T__0);
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(BeblangParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SubprogramBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramBodyContext subprogramBody() {
		SubprogramBodyContext _localctx = new SubprogramBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_subprogramBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(BEGIN);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 132;
				statement();
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitStatementContext exitStatement() {
			return GetRuleContext<ExitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramCallContext subprogramCall() {
			return GetRuleContext<SubprogramCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				assignment();
				State = 141;
				Match(T__0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				returnStatement();
				State = 144;
				Match(T__0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				exitStatement();
				State = 147;
				Match(T__0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				ifStatement();
				State = 150;
				Match(T__0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 152;
				whileStatement();
				State = 153;
				Match(T__0);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 155;
				subprogramCall();
				State = 156;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			designator();
			State = 161;
			Match(T__6);
			State = 162;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubprogramCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubprogramCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogramCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogramCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubprogramCallContext subprogramCall() {
		SubprogramCallContext _localctx = new SubprogramCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_subprogramCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			designator();
			State = 165;
			Match(T__2);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055634242453512L) != 0)) {
				{
				State = 166;
				expression();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 167;
					Match(T__5);
					State = 168;
					expression();
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 176;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(BeblangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			Match(RETURN);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1055634242453512L) != 0)) {
				{
				State = 179;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(BeblangParser.EXIT, 0); }
		public ExitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStatementContext exitStatement() {
		ExitStatementContext _localctx = new ExitStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_exitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(BeblangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BeblangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(IF);
			State = 185;
			expression();
			State = 186;
			Match(THEN);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 187;
				statement();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 193;
				elseIfStatement();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 199;
				elseStatement();
				}
			}

			State = 202;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF() { return GetToken(BeblangParser.ELSIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(BeblangParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(ELSIF);
			State = 205;
			expression();
			State = 206;
			Match(THEN);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 207;
				statement();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(BeblangParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(ELSE);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 214;
				statement();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(BeblangParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(BeblangParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(BeblangParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(WHILE);
			State = 221;
			expression();
			State = 222;
			Match(DO);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 141017063882752L) != 0)) {
				{
				{
				State = 223;
				statement();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			simpleExpression();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16128L) != 0)) {
				{
				State = 232;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16128L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 233;
				simpleExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(BeblangParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(BeblangParser.OR, i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_simpleExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__13 || _la==T__14) {
				{
				State = 236;
				_la = TokenStream.LA(1);
				if ( !(_la==T__13 || _la==T__14) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 239;
			term();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 137439002624L) != 0)) {
				{
				{
				State = 240;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 137439002624L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 241;
				term();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MOD() { return GetTokens(BeblangParser.MOD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD(int i) {
			return GetToken(BeblangParser.MOD, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 40, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			factor();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17180327936L) != 0)) {
				{
				{
				State = 248;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17180327936L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 249;
				factor();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubprogramCallContext subprogramCall() {
			return GetRuleContext<SubprogramCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 42, RULE_factor);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				Match(T__18);
				State = 256;
				factor();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(T__2);
				State = 258;
				expression();
				State = 259;
				Match(T__3);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261;
				subprogramCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 262;
				designator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(IDENTIFIER);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1 || _la==T__19) {
				{
				{
				State = 267;
				selector();
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BeblangParser.IDENTIFIER, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 46, RULE_selector);
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				Match(T__19);
				State = 274;
				expression();
				State = 275;
				Match(T__20);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				Match(T__1);
				State = 278;
				Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BeblangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BeblangParser.IDENTIFIER, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(IDENTIFIER);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 282;
				Match(T__1);
				State = 283;
				Match(IDENTIFIER);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(BeblangParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BeblangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(BeblangParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 50, RULE_literal);
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 289;
				Match(REAL_LITERAL);
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				Match(INTEGER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				boolean();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(BeblangParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(BeblangParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 52, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(BeblangParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(BeblangParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(BeblangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(BeblangParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(BeblangParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(BeblangParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(BeblangParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBeblangVisitor<TResult> typedVisitor = visitor as IBeblangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 54, RULE_type);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				Match(INTEGER);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298;
				Match(REAL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 299;
				Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 300;
				Match(BOOLEAN);
				}
				break;
			case ARRAY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 301;
				Match(ARRAY);
				State = 302;
				Match(INTEGER_LITERAL);
				State = 303;
				Match(OF);
				State = 304;
				type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,308,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,5,2,67,8,2,10,2,12,2,70,9,2,1,2,3,2,73,8,
		2,1,2,5,2,76,8,2,10,2,12,2,79,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,3,4,
		89,8,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,100,8,5,10,5,12,5,103,9,
		5,3,5,105,8,5,1,5,1,5,1,5,3,5,110,8,5,1,6,1,6,1,6,5,6,115,8,6,10,6,12,
		6,118,9,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,5,7,127,8,7,10,7,12,7,130,9,7,1,
		8,1,8,5,8,134,8,8,10,8,12,8,137,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,159,8,9,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,5,11,170,8,11,10,11,12,11,173,9,11,3,
		11,175,8,11,1,11,1,11,1,12,1,12,3,12,181,8,12,1,13,1,13,1,14,1,14,1,14,
		1,14,5,14,189,8,14,10,14,12,14,192,9,14,1,14,5,14,195,8,14,10,14,12,14,
		198,9,14,1,14,3,14,201,8,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,209,8,15,
		10,15,12,15,212,9,15,1,16,1,16,5,16,216,8,16,10,16,12,16,219,9,16,1,17,
		1,17,1,17,1,17,5,17,225,8,17,10,17,12,17,228,9,17,1,17,1,17,1,18,1,18,
		1,18,3,18,235,8,18,1,19,3,19,238,8,19,1,19,1,19,1,19,5,19,243,8,19,10,
		19,12,19,246,9,19,1,20,1,20,1,20,5,20,251,8,20,10,20,12,20,254,9,20,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,265,8,21,1,22,1,22,5,22,
		269,8,22,10,22,12,22,272,9,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,280,8,
		23,1,24,1,24,1,24,5,24,285,8,24,10,24,12,24,288,9,24,1,25,1,25,1,25,1,
		25,3,25,294,8,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
		306,8,27,1,27,0,0,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,0,5,1,0,8,13,1,0,14,15,2,0,14,15,37,37,2,
		0,16,18,34,34,1,0,35,36,321,0,56,1,0,0,0,2,59,1,0,0,0,4,68,1,0,0,0,6,82,
		1,0,0,0,8,86,1,0,0,0,10,93,1,0,0,0,12,111,1,0,0,0,14,122,1,0,0,0,16,131,
		1,0,0,0,18,158,1,0,0,0,20,160,1,0,0,0,22,164,1,0,0,0,24,178,1,0,0,0,26,
		182,1,0,0,0,28,184,1,0,0,0,30,204,1,0,0,0,32,213,1,0,0,0,34,220,1,0,0,
		0,36,231,1,0,0,0,38,237,1,0,0,0,40,247,1,0,0,0,42,264,1,0,0,0,44,266,1,
		0,0,0,46,279,1,0,0,0,48,281,1,0,0,0,50,293,1,0,0,0,52,295,1,0,0,0,54,305,
		1,0,0,0,56,57,3,2,1,0,57,58,5,0,0,1,58,1,1,0,0,0,59,60,5,22,0,0,60,61,
		3,48,24,0,61,62,5,1,0,0,62,63,3,4,2,0,63,64,5,2,0,0,64,3,1,0,0,0,65,67,
		3,6,3,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,72,
		1,0,0,0,70,68,1,0,0,0,71,73,3,14,7,0,72,71,1,0,0,0,72,73,1,0,0,0,73,77,
		1,0,0,0,74,76,3,8,4,0,75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,
		1,0,0,0,78,80,1,0,0,0,79,77,1,0,0,0,80,81,3,16,8,0,81,5,1,0,0,0,82,83,
		5,23,0,0,83,84,3,48,24,0,84,85,5,1,0,0,85,7,1,0,0,0,86,88,3,10,5,0,87,
		89,3,14,7,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,3,16,8,0,91,
		92,5,1,0,0,92,9,1,0,0,0,93,94,5,45,0,0,94,95,5,47,0,0,95,104,5,3,0,0,96,
		101,3,12,6,0,97,98,5,1,0,0,98,100,3,12,6,0,99,97,1,0,0,0,100,103,1,0,0,
		0,101,99,1,0,0,0,101,102,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,104,96,
		1,0,0,0,104,105,1,0,0,0,105,106,1,0,0,0,106,109,5,4,0,0,107,108,5,5,0,
		0,108,110,3,54,27,0,109,107,1,0,0,0,109,110,1,0,0,0,110,11,1,0,0,0,111,
		116,5,47,0,0,112,113,5,6,0,0,113,115,5,47,0,0,114,112,1,0,0,0,115,118,
		1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,0,0,
		0,119,120,5,5,0,0,120,121,3,54,27,0,121,13,1,0,0,0,122,128,5,24,0,0,123,
		124,3,12,6,0,124,125,5,1,0,0,125,127,1,0,0,0,126,123,1,0,0,0,127,130,1,
		0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,15,1,0,0,0,130,128,1,0,0,0,131,
		135,5,25,0,0,132,134,3,18,9,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,
		1,0,0,0,135,136,1,0,0,0,136,138,1,0,0,0,137,135,1,0,0,0,138,139,5,26,0,
		0,139,17,1,0,0,0,140,141,3,20,10,0,141,142,5,1,0,0,142,159,1,0,0,0,143,
		144,3,24,12,0,144,145,5,1,0,0,145,159,1,0,0,0,146,147,3,26,13,0,147,148,
		5,1,0,0,148,159,1,0,0,0,149,150,3,28,14,0,150,151,5,1,0,0,151,159,1,0,
		0,0,152,153,3,34,17,0,153,154,5,1,0,0,154,159,1,0,0,0,155,156,3,22,11,
		0,156,157,5,1,0,0,157,159,1,0,0,0,158,140,1,0,0,0,158,143,1,0,0,0,158,
		146,1,0,0,0,158,149,1,0,0,0,158,152,1,0,0,0,158,155,1,0,0,0,159,19,1,0,
		0,0,160,161,3,44,22,0,161,162,5,7,0,0,162,163,3,36,18,0,163,21,1,0,0,0,
		164,165,3,44,22,0,165,174,5,3,0,0,166,171,3,36,18,0,167,168,5,6,0,0,168,
		170,3,36,18,0,169,167,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,
		1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,174,166,1,0,0,0,174,175,1,0,0,
		0,175,176,1,0,0,0,176,177,5,4,0,0,177,23,1,0,0,0,178,180,5,38,0,0,179,
		181,3,36,18,0,180,179,1,0,0,0,180,181,1,0,0,0,181,25,1,0,0,0,182,183,5,
		27,0,0,183,27,1,0,0,0,184,185,5,28,0,0,185,186,3,36,18,0,186,190,5,29,
		0,0,187,189,3,18,9,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,
		191,1,0,0,0,191,196,1,0,0,0,192,190,1,0,0,0,193,195,3,30,15,0,194,193,
		1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,200,1,0,0,
		0,198,196,1,0,0,0,199,201,3,32,16,0,200,199,1,0,0,0,200,201,1,0,0,0,201,
		202,1,0,0,0,202,203,5,26,0,0,203,29,1,0,0,0,204,205,5,30,0,0,205,206,3,
		36,18,0,206,210,5,29,0,0,207,209,3,18,9,0,208,207,1,0,0,0,209,212,1,0,
		0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,31,1,0,0,0,212,210,1,0,0,0,213,
		217,5,31,0,0,214,216,3,18,9,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,
		1,0,0,0,217,218,1,0,0,0,218,33,1,0,0,0,219,217,1,0,0,0,220,221,5,32,0,
		0,221,222,3,36,18,0,222,226,5,33,0,0,223,225,3,18,9,0,224,223,1,0,0,0,
		225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,
		1,0,0,0,229,230,5,26,0,0,230,35,1,0,0,0,231,234,3,38,19,0,232,233,7,0,
		0,0,233,235,3,38,19,0,234,232,1,0,0,0,234,235,1,0,0,0,235,37,1,0,0,0,236,
		238,7,1,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,244,3,
		40,20,0,240,241,7,2,0,0,241,243,3,40,20,0,242,240,1,0,0,0,243,246,1,0,
		0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,39,1,0,0,0,246,244,1,0,0,0,247,
		252,3,42,21,0,248,249,7,3,0,0,249,251,3,42,21,0,250,248,1,0,0,0,251,254,
		1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,41,1,0,0,0,254,252,1,0,0,0,
		255,256,5,19,0,0,256,265,3,42,21,0,257,258,5,3,0,0,258,259,3,36,18,0,259,
		260,5,4,0,0,260,265,1,0,0,0,261,265,3,22,11,0,262,265,3,44,22,0,263,265,
		3,50,25,0,264,255,1,0,0,0,264,257,1,0,0,0,264,261,1,0,0,0,264,262,1,0,
		0,0,264,263,1,0,0,0,265,43,1,0,0,0,266,270,5,47,0,0,267,269,3,46,23,0,
		268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,45,
		1,0,0,0,272,270,1,0,0,0,273,274,5,20,0,0,274,275,3,36,18,0,275,276,5,21,
		0,0,276,280,1,0,0,0,277,278,5,2,0,0,278,280,5,47,0,0,279,273,1,0,0,0,279,
		277,1,0,0,0,280,47,1,0,0,0,281,286,5,47,0,0,282,283,5,2,0,0,283,285,5,
		47,0,0,284,282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,
		287,49,1,0,0,0,288,286,1,0,0,0,289,294,5,48,0,0,290,294,5,46,0,0,291,294,
		5,49,0,0,292,294,3,52,26,0,293,289,1,0,0,0,293,290,1,0,0,0,293,291,1,0,
		0,0,293,292,1,0,0,0,294,51,1,0,0,0,295,296,7,4,0,0,296,53,1,0,0,0,297,
		306,5,41,0,0,298,306,5,42,0,0,299,306,5,43,0,0,300,306,5,44,0,0,301,302,
		5,39,0,0,302,303,5,46,0,0,303,304,5,40,0,0,304,306,3,54,27,0,305,297,1,
		0,0,0,305,298,1,0,0,0,305,299,1,0,0,0,305,300,1,0,0,0,305,301,1,0,0,0,
		306,55,1,0,0,0,30,68,72,77,88,101,104,109,116,128,135,158,171,174,180,
		190,196,200,210,217,226,234,237,244,252,264,270,279,286,293,305
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
